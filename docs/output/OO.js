Ext.data.JsonP.OO({"tagname":"class","name":"OO","autodetected":{},"files":[{"filename":"core.js","href":"core.html#OO"}],"singleton":true,"members":[{"name":"cloneObject","tagname":"method","owner":"OO","id":"method-cloneObject","meta":{}},{"name":"compare","tagname":"method","owner":"OO","id":"method-compare","meta":{}},{"name":"copy","tagname":"method","owner":"OO","id":"method-copy","meta":{}},{"name":"getHash","tagname":"method","owner":"OO","id":"method-getHash","meta":{}},{"name":"getObjectValues","tagname":"method","owner":"OO","id":"method-getObjectValues","meta":{}},{"name":"inheritClass","tagname":"method","owner":"OO","id":"method-inheritClass","meta":{}},{"name":"isPlainObject","tagname":"method","owner":"OO","id":"method-isPlainObject","meta":{}},{"name":"keySortReplacer","tagname":"method","owner":"OO","id":"method-keySortReplacer","meta":{}},{"name":"mixinClass","tagname":"method","owner":"OO","id":"method-mixinClass","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-OO","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/core.html#OO' target='_blank'>core.js</a></div></pre><div class='doc-contents'><p>Namespace for all classes, static methods and static properties.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-cloneObject' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-cloneObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-cloneObject' class='name expandable'>cloneObject</a>( <span class='pre'>origin</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new object that is an instance of the same\nconstructor as the input, inherits from the same object\nand conta...</div><div class='long'><p>Create a new object that is an instance of the same\nconstructor as the input, inherits from the same object\nand contains the same own properties.</p>\n\n<p>This makes a shallow non-recursive copy of own properties.\nTo create a recursive copy of plain objects, use <a href=\"#!/api/OO-method-copy\" rel=\"OO-method-copy\" class=\"docClass\">copy</a>.</p>\n\n<pre><code>var foo = new Person( mom, dad );\nfoo.setAge( 21 );\nvar foo2 = <a href=\"#!/api/OO-method-cloneObject\" rel=\"OO-method-cloneObject\" class=\"docClass\">OO.cloneObject</a>( foo );\nfoo.setAge( 22 );\n\n// Then\nfoo2 !== foo; // true\nfoo2 instanceof Person; // true\nfoo2.getAge(); // 21\nfoo.getAge(); // 22\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>origin</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>Clone of origin</p>\n</div></li></ul></div></div></div><div id='method-compare' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-compare' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-compare' class='name expandable'>compare</a>( <span class='pre'>a, b, [asymmetrical]</span> ) : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">boolean</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Recursively compares properties between two objects. ...</div><div class='long'><p>Recursively compares properties between two objects.</p>\n\n<p>A false result may be caused by property inequality or by properties in one object missing from\nthe other. An asymmetrical test may also be performed, which checks only that properties in the\nfirst object are present in the second object, but not the inverse.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>a</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>First object to compare</p>\n</div></li><li><span class='pre'>b</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Second object to compare</p>\n</div></li><li><span class='pre'>asymmetrical</span> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">boolean</a> (optional)<div class='sub-desc'><p>Whether to check only that b contains values from a</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">boolean</a></span><div class='sub-desc'><p>If the objects contain the same values as each other</p>\n</div></li></ul></div></div></div><div id='method-copy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-copy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-copy' class='name expandable'>copy</a>( <span class='pre'>source, [callback]</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Create a plain deep copy of any kind of object. ...</div><div class='long'><p>Create a plain deep copy of any kind of object.</p>\n\n<p>Copies are deep, and will either be an object or an array depending on <code>source</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>source</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Object to copy</p>\n</div></li><li><span class='pre'>callback</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> (optional)<div class='sub-desc'><p>Applied to leaf values before they added to the clone</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>Copy of source object</p>\n</div></li></ul></div></div></div><div id='method-getHash' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-getHash' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-getHash' class='name expandable'>getHash</a>( <span class='pre'>val</span> ) : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">string</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Generates a hash of an object based on its name and data. ...</div><div class='long'><p>Generates a hash of an object based on its name and data.\nPerformance optimization: http://jsperf.com/ve-gethash-201208#/toJson_fnReplacerIfAoForElse</p>\n\n<p>To avoid two objects with the same values generating different hashes, we utilize the replacer\nargument of JSON.stringify and sort the object by key as it's being serialized. This may or may\nnot be the fastest way to do this; we should investigate this further.</p>\n\n<p>Objects and arrays are hashed recursively. When hashing an object that has a .getHash()\nfunction, we call that function and use its return value rather than hashing the object\nourselves. This allows classes to define custom hashing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Object to generate hash for</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">string</a></span><div class='sub-desc'><p>Hash of object</p>\n</div></li></ul></div></div></div><div id='method-getObjectValues' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-getObjectValues' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-getObjectValues' class='name expandable'>getObjectValues</a>( <span class='pre'>Object</span> ) : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Gets an array of all property values in an object. ...</div><div class='long'><p>Gets an array of all property values in an object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>Object</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>to get values from</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a></span><div class='sub-desc'><p>List of object values</p>\n</div></li></ul></div></div></div><div id='method-inheritClass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-inheritClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-inheritClass' class='name expandable'>inheritClass</a>( <span class='pre'>targetFn, originFn</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Utility for common usage of Object.create for inheriting from one\nprototype to another. ...</div><div class='long'><p>Utility for common usage of <a href=\"#!/api/Object-static-method-create\" rel=\"Object-static-method-create\" class=\"docClass\">Object.create</a> for inheriting from one\nprototype to another.</p>\n\n<p>Beware: This redefines the prototype, call before setting your prototypes.\nBeware: This redefines the prototype, can only be called once on a function.\n If called multiple times on the same function, the previous prototype is lost.\n This is how prototypal inheritance works, it can only be one straight chain\n (just like classical inheritance in PHP for example). If you need to work with\n multiple constructors consider storing an instance of the other constructor in a\n property instead, or perhaps use a mixin (see oo.mixinClass).</p>\n\n<pre><code>function Foo() {}\nFoo.prototype.jump = function () {};\n\nfunction FooBar() {}\noo.inheritClass( FooBar, Foo );\nFooBar.prop.feet = 2;\nFooBar.prototype.walk = function () {};\n\nfunction FooBarQuux() {}\n<a href=\"#!/api/OO-method-inheritClass\" rel=\"OO-method-inheritClass\" class=\"docClass\">OO.inheritClass</a>( FooBarQuux, FooBar );\nFooBarQuux.prototype.jump = function () {};\n\nFooBarQuux.prop.feet === 2;\nvar fb = new FooBar();\nfb.jump();\nfb.walk();\nfb instanceof Foo &amp;&amp; fb instanceof FooBar &amp;&amp; fb instanceof FooBarQuux;\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>targetFn</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'>\n</div></li><li><span class='pre'>originFn</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Throws</h3><ul><li><span class='pre'>Error</span><div class='sub-desc'><p>If target already inherits from origin</p>\n</div></li></ul></div></div></div><div id='method-isPlainObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-isPlainObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-isPlainObject' class='name expandable'>isPlainObject</a>( <span class='pre'>obj</span> ) : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">boolean</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Assert whether a value is a plain object or not. ...</div><div class='long'><p>Assert whether a value is a plain object or not.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Mixed<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">boolean</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-keySortReplacer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-keySortReplacer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-keySortReplacer' class='name expandable'>keySortReplacer</a>( <span class='pre'>key, val</span> ) : Mixed<span class=\"signature\"></span></div><div class='description'><div class='short'>Helper function for oo.getHash which sorts objects by key. ...</div><div class='long'><p>Helper function for oo.getHash which sorts objects by key.</p>\n\n<p>This is a callback passed into JSON.stringify.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">string</a><div class='sub-desc'><p>Property name of value being replaced</p>\n</div></li><li><span class='pre'>val</span> : Mixed<div class='sub-desc'><p>Property value to replace</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>Replacement value</p>\n</div></li></ul></div></div></div><div id='method-mixinClass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='OO'>OO</span><br/><a href='source/core.html#OO-method-mixinClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/OO-method-mixinClass' class='name expandable'>mixinClass</a>( <span class='pre'>targetFn, originFn</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Utility to copy over own prototype properties of a mixin. ...</div><div class='long'><p>Utility to copy over <em>own</em> prototype properties of a mixin.\nThe 'constructor' (whether implicit or explicit) is not copied over.</p>\n\n<p>This does not create inheritance to the origin. If inheritance is needed\nuse oo.inheritClass instead.</p>\n\n<p>Beware: This can redefine a prototype property, call before setting your prototypes.\nBeware: Don't call before oo.inheritClass.</p>\n\n<pre><code>function Foo() {}\nfunction Context() {}\n\n// Avoid repeating this code\nfunction ContextLazyLoad() {}\nContextLazyLoad.prototype.getContext = function () {\n    if ( !this.context ) {\n        this.context = new Context();\n    }\n    return this.context;\n};\n\nfunction FooBar() {}\n<a href=\"#!/api/OO-method-inheritClass\" rel=\"OO-method-inheritClass\" class=\"docClass\">OO.inheritClass</a>( FooBar, Foo );\n<a href=\"#!/api/OO-method-mixinClass\" rel=\"OO-method-mixinClass\" class=\"docClass\">OO.mixinClass</a>( FooBar, ContextLazyLoad );\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>targetFn</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'>\n</div></li><li><span class='pre'>originFn</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});